Day Of The Year

https://leetcode.com/problems/day-of-the-year/ 

class Solution {
    public int dayOfYear(String date) {
       int[] arr = {31,28,31,30,31,30,31,31,30,31,30,31};
        String[] monthDay = date.split("-");
        int year = Integer.parseInt(monthDay[0]);
        int month = Integer.parseInt(monthDay[1]);
        int day = Integer.parseInt(monthDay[2]);
        int dayYear = day;
        for(int i=0;i<month-1;i++){
            dayYear = dayYear+arr[i];
        }
        if(month>2 && year%4==0 && year%400==0){
            dayYear+=1;
        }
        return dayYear;    
    }
}


https://leetcode.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/

class Solution {
    public int subtractProductAndSum(int n) {
        int prod = 1;
        int sum = 0;
        int res = n;
        int rem=0;
        while(res>0){
            rem = res%10;
            res = res/10;
            sum = sum+rem;
            prod = prod*rem;
        }
        return (prod-sum);
      
    }
}

https://leetcode.com/problems/alternating-digit-sum/

class Solution {
    public int alternateDigitSum(int n) {
        int count=0,sum=0,rem=0,r=0,place=0;
        int temp = n;
        while(temp>0){
            r = temp%10;
            temp = temp/10;
            count++;
        }
        if(count%2==0){
            while(n>0){
                place++;
                if(place%2==0){
                    rem = n%10;
                }
                else{
                    rem = (n%10)*(-1);
                }
                sum += rem;
                n = n/10;
            }
        }
        else{
            while(n>0){
                place++;
                if(place%2==0){
                    rem = (n%10)*(-1);
                    
                }
                else{
                    rem = n%10;
                }
                sum = sum+rem;
                n= n/10;
            }
        }
        return sum;
        
    }
}

https://leetcode.com/problems/number-of-1-bits/

public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int cnt = 0;
        while(n!=0){
            n = n&(n-1);
            cnt++;
        }
        return cnt;
       
    }
}

https://practice.geeksforgeeks.org/problems/find-sum-of-different-corresponding-bits-for-all-pairs4652/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

class Solution{
public:
    int countBits(int N, long long int A[])
    {
        long long sumBit = 0;
        int mod = 1000000007;
        for(int i=31;i>=0;i--){
            long long setBit = 0,unsetBit=0;
            for(long long int j=0;j<N;j++){
                if((A[j]>>i)&1!=0){
                    setBit++;
                }
                else{
                    unsetBit++;
                }
            }
            sumBit = (sumBit+(setBit*unsetBit*2)%mod)%mod;
        }
        return sumBit;
    }
};
